from abc import abstractmethod
from typing import Dict, Any

import textstat
from .base_metric import BaseMetric

class AbstractSummarisationMetric(BaseMetric):
    """Abstract base class for summarisation metrics."""
    @abstractmethod
    def calculate(self, summary: str, **kwargs) -> Dict[str, Any]: # type: ignore
        """
        Calculates summarisation-specific metrics.
        Args:
            summary: The summary text generated by the LLM.
            **kwargs: Additional arguments specific to the metric.
        Returns:
            A dictionary of calculated metrics.
        """
        pass


class FleschReadingEaseScore(AbstractSummarisationMetric):
    """Calculates the Flesch Reading Ease score."""

    def calculate(self, summary: str, **kwargs) -> Dict[str, Any]:
        if not summary or not summary.strip():
            return {"summary_flesch_reading_ease": 0.0}

        try:
            textstat.set_lang("en_UK")
            score = textstat.flesch_reading_ease(summary)
        except Exception as e:
            print(f"Could not calculate Flesch Reading Ease score: {e}")
            score = 0.0
            
        return {"summary_flesch_reading_ease": round(score, 2)}

class GunningFogIndex(AbstractSummarisationMetric):
    """Calculates the Gunning Fog Index."""

    def calculate(self, summary: str, **kwargs) -> Dict[str, Any]:
        if not summary or not summary.strip():
            return {"summary_gunning_fog_index": 0.0}

        try:
            textstat.set_lang("en_UK")
            score = textstat.gunning_fog(summary)
        except Exception as e:
            print(f"Could not calculate Gunning Fog Index: {e}")
            score = 0.0
            
        return {"summary_gunning_fog_index": round(score, 2)}
